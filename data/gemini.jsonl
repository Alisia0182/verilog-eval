{"task_id": "gatesv", "completion": "wire [3:0] both, any, different;\nassign both  = in[0] & in[1] & in[2] & in[3];\nassign any   = in[0] | in[1] | in[2] | in[3];\nassign different  = in[0] ^ in[1] ^ in[2] ^ in[3];\nassign out_both = both[2:0];\nassign out_any  = any[3:1];\nassign out_different = different[3:0];\nendmodule"}
{"task_id": "gatesv", "completion": "assign out_both = in[3:1];\nassign out_any = {in[3], in[2]};\nassign out_different = {in[3], in[2], in[1], in[0]};\nendmodule"}
{"task_id": "rotate100", "completion": "always @(posedge clk)\n\tif (load)\n\t\tq <= data;\n\telse if (ena[1])\n\t\tq[7:0] <= data[7:0];\n\telse if (ena[0])\n\t\tq[15:8] <= data[15:8];\nendmodule"}
{"task_id": "rotate100", "completion": "always @(posedge clk) begin\n  if (load)\n    q <= data;\n  else if (ena[1])\n    q[49:0] <= q[99:50];\n  else if (ena[0])\n    q[99:50] <= q[49:0];\nend\nendmodule"}
{"task_id": "review2015_fsmonehot", "completion": "always @(posedge clk) begin\n    B3_next <= (state == 10'b0000000001) ? ack : 0;\n    S_next <= (state == 10'b0000000010) ? 1 : 0;\n    S1_next <= (state == 10'b0000000100) ? 1 : 0;\n    Count_next <= (state == 10'b0000001000) ? (done_counting) : 0;\n    Wait_next <= (state == 10'b0000010000) ? (d == 1) : 0;\n    done <= (state == 10'b1000000000);\n    counting <= (state == 10'b0000001000);\n    shift_ena <= (state == 10'b0000000100);\nend\nendmodule"}
{"task_id": "review2015_fsmonehot", "completion": "assign B3_next = done_counting & ack & (state == 10'b1000000000);\nassign S_next = done_counting & ack & ~counting & (state == 10'b0100000000 | state == 10'b0010000000);\nassign S1_next = done_counting & counting & (state == 10'b0010000000);\nassign Count_next = d & done_counting & counting & (state == 10'b0010000000);\nassign counting = |state[1:9];\nassign done = (state == 10'b1000000000);\nassign Wait_next = ~done_counting & (state == 10'b0100000000 | state == 10'b0010000000);\nassign shift_ena = done_counting & (state == 10'b0100000000);\nendmodule"}
{"task_id": "dff8ar", "completion": "reg [2:0] lfsr = 3'b101;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tlfsr <= 3'b101;\n\t\tq <= 8'b0;\n\tend else begin\n\t\tif (d[7]) begin\n\t\t\t{q, lfsr} <= {lfsr[2], lfsr[1] ^ lfsr[2], lfsr[0] ^ lfsr[1], lfsr[0], 8'b0};\n\t\tend else begin\n\t\t\t{q, lfsr} <= {lfsr[2], lfsr[1] ^ lfsr[2], lfsr[0] ^ lfsr[2], lfsr[0], d[7:0]};\n\t\tend\n\tend\nend\nendmodule"}
{"task_id": "dff8ar", "completion": "always @(posedge clk)\nbegin\n    if (areset) q <= 8'b0;\n    else q <= d;\nend\nendmodule"}
{"task_id": "kmap3", "completion": "always@ (posedge clk) begin\n\tif (a & ~b & c) out <= d;\n\telse out <= ~d;\nend\n\nendmodule"}
{"task_id": "kmap3", "completion": "wire w1, w2;\n\nassign w1 = a & b;\nassign w2 = (c | d) & w1;\nalways @(posedge clk) begin\n  out <= w2;\nend\nendmodule"}
{"task_id": "lemmings1", "completion": "reg state, next_state;\n\nparameter\n\tS_STAND = 3'b000,\n\tS_LEFT = 3'b001,\n\tS_RIGHT = 3'b010;\n\nalways @(posedge clk, posedge areset) begin\n\tif (areset) begin\n\t\tstate <= S_STAND;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tS_STAND: begin\n\t\t\tif (bump_left) begin\n\t\t\t\tnext_state = S_LEFT;\n\t\t\tend\n\t\t\telse if (bump_right) begin\n\t\t\t\tnext_state = S_RIGHT;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = S_STAND;\n\t\t\tend\n\t\tend\n\t\tS_LEFT: begin\n\t\t\tif (bump_left) begin\n\t\t\t\tnext_state = S_LEFT;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = S_STAND;\n\t\t\tend\n\t\tend\n\t\tS_RIGHT: begin\n\t\t\tif (bump_right) begin\n\t\t\t\tnext_state = S_RIGHT;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = S_STAND;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nassign walk_left = (state == S_LEFT);\nassign walk_right = (state == S_RIGHT);\nendmodule"}
{"task_id": "lemmings1", "completion": "reg [2:0] state;\nreg [2:0] nextstate;\nparameter IDLE = 0, WL = 1, WR = 2;\n\nalways @(posedge clk, posedge areset) begin\n\tif (areset) begin\n\t\tstate <= IDLE;\n\tend\n\telse begin\n\t\tstate <= nextstate;\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tIDLE: begin\n\t\t\tif (bump_left) begin\n\t\t\t\tnextstate = WL;\n\t\t\tend\n\t\t\telse if (bump_right) begin\n\t\t\t\tnextstate = WR;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnextstate = IDLE;\n\t\t\tend\n\t\tend\n\t\tWL: begin\n\t\t\tif (bump_left) begin\n\t\t\t\tnextstate = WL;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnextstate = IDLE;\n\t\t\tend\n\t\tend\n\t\tWR: begin\n\t\t\tif (bump_right) begin\n\t\t\t\tnextstate = WR;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnextstate = IDLE;\n\t\t\tend\n\t\tend\n\t\tdefault: begin\n\t\t\tnextstate = IDLE;\n\t\tend\n\tendcase\nend\n\nassign walk_left = (state == WL);\nassign walk_right = (state == WR);\nendmodule"}
{"task_id": "2013_q2afsm", "completion": "parameter g0 = 0, g1 = 1, g2 = 2, g3 = 3;\nreg [3:1] current_g = g0, next_g = g0;\n\nalways @(posedge clk) begin\n\tif (!resetn) current_g <= g0;\n\telse current_g <= next_g;\nend\n\nalways @(*) begin\n\tcase (r)\n\t\t3'b001: next_g = g1;\n\t\t3'b010: next_g = g2;\n\t\t3'b011: next_g = g3;\n\t\tdefault: next_g = current_g;\n\tendcase\nend\n\nassign g = current_g;\nendmodule"}
{"task_id": "2013_q2afsm", "completion": "reg [1:0] r_reg;\nalways @(posedge clk, negedge resetn) begin\n\tif (!resetn) begin\n\t\tr_reg <= 0;\n\tend\n\telse begin\n\t\tr_reg <= r[1:0];\n\tend\nend\n\nassign g = r_reg == 0 ? 0 : (r_reg == 1 ? 1 : r);\nendmodule"}
{"task_id": "fsm_hdlc", "completion": "always @(posedge clk)\nbegin\n\tif (!reset)\n\tbegin\n\t\tdisc <= 0;\n\t\tflag <= 0;\n\t\terr <= 0;\n\tend\n\telse if (in == 0)\n\t\tdisc <= 1;\n\telse if (in == 1)\n\tbegin\n\t\tif (flag == 0)\n\t\t\tflag <= 1;\n\t\telse if (flag == 1)\n\t\t\terr <= 1;\n\tend\nend\nendmodule"}
{"task_id": "fsm_hdlc", "completion": "reg [3:0] state, next_state;\n\nparameter [3:0] IDLE = 4'b0000,\n\t\t\t\t  S1 = 4'b0001,\n\t\t\t\t  S2 = 4'b0010,\n\t\t\t\t  S3 = 4'b0011,\n\t\t\t\t  S4 = 4'b0100,\n\t\t\t\t  ERROR = 4'b1111;\n\nalways @(posedge clk, posedge reset) begin\n\tif (reset)\n\t\tstate <= IDLE;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tIDLE:\n\t\t\tif (in)\n\t\t\t\tnext_state = S1;\n\t\t\telse\n\t\t\t\tnext_state = IDLE;\n\t\tS1:\n\t\t\tnext_state = S2;\n\t\tS2:\n\t\t\tnext_state = S3;\n\t\tS3:\n\t\t\tnext_state = S4;\n\t\tS4:\n\t\t\tif (~in) begin\n\t\t\t\tnext_state = S1;\n\t\t\t\tflag = 1'b1;\n\t\t\tend else begin\n\t\t\t\tnext_state = ERROR;\n\t\t\t\terr = 1'b1;\n\t\t\tend\n\t\tERROR:\n\t\t\tnext_state = ERROR;\n\t\tdefault:\n\t\t\tnext_state = IDLE;\n\tendcase\nend\n\nassign disc = (state == S1);\nendmodule"}
{"task_id": "bugs_mux2", "completion": "assign out = sel ? b : a;\nendmodule"}
{"task_id": "bugs_mux2", "completion": "always @(posedge clk) begin\n\tif (sel)\n\t\tout <= a;\n\telse\n\t\tout <= b;\nend\nendmodule"}
{"task_id": "review2015_count1k", "completion": "reg [3:0] state;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tstate <= 0;\n\telse\n\t\tcase (state)\n\t\t\t0:\tbegin\n\t\t\t\t\tq <= 0;\n\t\t\t\t\tstate <= 1;\n\t\t\t\tend\n\t\t\t1:\tbegin\n\t\t\t\t\tq <= 1;\n\t\t\t\t\tstate <= 2;\n\t\t\t\tend\n\t\t\t2:\tbegin\n\t\t\t\t\tq <= 2;\n\t\t\t\t\tstate <= 3;\n\t\t\t\tend\n\t\t\t3:\tbegin\n\t\t\t\t\tq <= 3;\n\t\t\t\t\tstate <= 4;\n\t\t\t\tend\n\t\t\t4:\tbegin\n\t\t\t\t\tq <= 4;\n\t\t\t\t\tstate <= 5;\n\t\t\t\tend\n\t\t\t5:\tbegin\n\t\t\t\t\tq <= 5;\n\t\t\t\t\tstate <= 6;\n\t\t\t\tend\n\t\t\t6:\tbegin\n\t\t\t\t\tq <= 6;\n\t\t\t\t\tstate <= 7;\n\t\t\t\tend\n\t\t\t7:\tbegin\n\t\t\t\t\tq <= 7;\n\t\t\t\t\tstate <= 8;\n\t\t\t\tend\n\t\t\t8:\tbegin\n\t\t\t\t\tq <= 8;\n\t\t\t\t\tstate <= 9;\n\t\t\t\tend\n\t\t\t9:\tbegin\n\t\t\t\t\tq <= 9;\n\t\t\t\t\tstate <= 10;\n\t\t\t\tend\n\t\t\t10:\tbegin\n\t\t\t\t\tq <= 10;\n\t\t\t\t\tstate <= 0;\n\t\t\t\tend\n\t\tendcase\nend\nendmodule"}
{"task_id": "review2015_count1k", "completion": "reg [2:0] cnt;\nreg [9:0] q_next;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        cnt <= 0;\n        q <= 0;\n    end\n    else begin\n        cnt <= cnt + 1;\n        q <= q_next;\n    end\nend\n\nalways @(*) begin\n    case (cnt)\n        0: q_next = 10'b0000000001;\n        1: q_next = 10'b0000000011;\n        2: q_next = 10'b0000000111;\n        3: q_next = 10'b0000001111;\n        4: q_next = 10'b0000011111;\n        5: q_next = 10'b0000111111;\n        6: q_next = 10'b0001111111;\n        7: q_next = 10'b0011111111;\n        8: q_next = 10'b0111111111;\n        9: q_next = 10'b1111111111;\n        default: q_next = 10'b0000000000;\n    endcase\nend\nendmodule"}
