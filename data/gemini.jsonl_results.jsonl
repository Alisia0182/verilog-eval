{"task_id": "mux2to1v", "completion": "assign out = sel ? b : a;\nendmodule", "result": "passed", "passed": true}
{"task_id": "mux2to1v", "completion": "assign out = sel ? b : a;\nendmodule", "result": "passed", "passed": true}
{"task_id": "mux2to1v", "completion": "assign out = sel ? b : a;\nendmodule", "result": "passed", "passed": true}
{"task_id": "mux2to1v", "completion": "assign out = sel ? b : a;\nendmodule", "result": "passed", "passed": true}
{"task_id": "mux2to1v", "completion": "assign x = sel ? b : a;\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q6b", "completion": "assign Y2 = (Y1 & !Y0 & !IN) | (~Y0 & IN);\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q6b", "completion": "assign Y2 = (Y1 & !Y0 & !in) | (!Y1 & !Y0 & in) | (Y2 & Y1 & !in) | (Y2 & Y1 & in);\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q6b", "completion": "assign Y2 = ( ( (~Y1) & (~Y3) & in ) | (~Y1) & Y2 & (~in) | Y1 & Y2 & in | Y1 & Y3 & (~in) );\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q6b", "completion": "always @(posedge clk)\n  case (y)\n    3'b000: Y2 <= (in) ? 1'b0 : 1'b1;\n    3'b001: Y2 <= 1'b0;\n    3'b010: Y2 <= 1'b0;\n    3'b011: Y2 <= 1'b1;\n    3'b100: Y2 <= 1'b0;\n    3'b101: Y2 <= (in) ? 1'b1 : 1'b0;\n    default: Y2 <= 1'bx;\n  endcase\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q6b", "completion": "assign Y2 = (Y==3'b011) ? 1'b0 : ((Y==3'b100 || Y==3'b110) ? 1'b1 : Y2);\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ringer", "completion": "always @(posedge clk) begin\n  if (vibrate_mode)\n    motor = 1;\n  else\n    ringer = 1;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ringer", "completion": "reg ringer, motor;\nalways @(posedge clk)\nbegin\n  if (vibrate_mode)\n    motor <= 1'b1;\n  else\n    ringer <= 1'b1;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ringer", "completion": "always @(posedge clk) begin\n    if (vibrate_mode)\n        motor = 1;\n    else\n        ringer = 1;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ringer", "completion": "always @ (posedge clk) begin\n  if (vibrate_mode)\n    motor = 1;\n  else\n    ringer = 1;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ringer", "completion": "reg ringer, motor;\nalways @(posedge clk) begin\n  if (vibrate_mode)\n    motor = 1'b1;\n  else\n    ringer = 1'b1;\n  if (!vibrate_mode)\n    ringer = 1'b0;\n  if (vibrate_mode)\n    motor = 1'b0;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "alwaysblock1", "completion": "assign and_assign = a & b;\n\nalways @(posedge clk) begin\n  and_comb <= a & b;\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "alwaysblock1", "completion": "assign out = in1 & in2;\n\nalways @(posedge clk) begin\n  out <= in1 & in2;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "alwaysblock1", "completion": "assign out = a & b;\n\nalways @ (posedge clk)\nbegin\n    out <= a & b;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "alwaysblock1", "completion": "assign and_out = and_in1 & and_in2;\n\nalways @(posedge clk) begin\n  and_out <= and_in1 & and_in2;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "alwaysblock1", "completion": "assign and_product = a & b;\n\nalways @ (posedge clk) begin\n  and_product_comb <= a & b;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "zero", "completion": "assign out = 1'b0;\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "zero", "completion": "assign out = 1'b0;\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "zero", "completion": "assign output = 1'b0;\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "zero", "completion": "assign wire_out = 1'b0;\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "zero", "completion": "assign output = 1'b0;\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "circuit7", "completion": "reg q;\nalways @(posedge clk)\n  if (a)\n    q <= ~q;\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit7", "completion": "reg q, a_reg;\n\nalways @(posedge clk) begin\n    a_reg <= a;\n    if (a == 1 && a_reg == 0) begin\n        q <= !q;\n    end\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit7", "completion": "reg q;\nalways @ (posedge clk)\nbegin\n  if (a == 1'b1)\n    q = 1'b1;\n  else if (q == 1'b1)\n    q = 1'b0;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit7", "completion": "reg q;\nalways @(posedge clk)\n  q <= a & ~q | q & ~a;\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit7", "completion": "reg q;\n\nalways @(posedge clk) begin\n  if (a)\n    q <= 0;\n  else\n    q <= 1;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ece241_2014_q5a", "completion": "always @(posedge clk or posedge Reset)\n  if (Reset) {Z, state} <= {1'b0, 1'b0};\n  else case (state)\n    1'b0: if (x) {Z, state} <= {1'b1, 1'b1};\n    1'b1: if (!x) state <= 1'b0;\n  endcase\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ece241_2014_q5a", "completion": "reg [1:0] State, NextState;\nreg [31:0] A;\n\nalways @(posedge clk or posedge Reset) begin\n  if (Reset) begin\n    State <= 0;\n    A <= 0;\n  end\n  else begin\n    State <= NextState;\n    case (State)\n      0: if (~x) NextState <= 1; else NextState <= 2;\n      1: NextState <= 1;\n      2: NextState <= 3;\n      3: NextState <= 3;\n    endcase\n    case (State)\n      0: A <= 0;\n      1: A <= {A[30:0], x};\n      2: A <= A + 1;\n      3: A <= A - 1;\n    endcase\n  end\nend\n\nassign Z = State == 2 ? -A : ~A;\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ece241_2014_q5a", "completion": "reg [1:0] state;\nreg [1:0] next_state;\nreg z;\n\nparameter get_sign = 2'b00;\nparameter get_val = 2'b01;\nparameter get_digits = 2'b10;\n\nalways @(state or x or reset) begin\n    case (state)\n        get_sign: begin\n          z = x;\n          next_state = get_digits;  \n        end\n        get_val: begin\n          if (x == 1'b0)\n          z = ~z;\n          next_state = get_digits;  \n        end\n        get_digits: begin\n          if (reset)\n          next_state = get_sign;\n          else if (x == 1'b0 & z == 1'b1)\n          next_state = get_val;\n          else if (x == 1'b1 & z == 1'b0)\n          next_state = get_digits;\n        end\n    endcase\nend\n\nalways @(posedge clk) begin\n  if (reset)\n    state <= get_sign;\n  else\n    state <= next_state;\nend", "result": "failed: syntax error.", "passed": false}
{"task_id": "ece241_2014_q5a", "completion": "always@(posedge clk or posedge Reset) begin\n    if(Reset) begin\n        state <= IDLE;\n        Z <= 0;\n        count <= 0;\n    end\n    else begin\n        case(state)\n            IDLE: begin\n                if(x) begin\n                    state <= SHIFTING;\n                    Z <= x;\n                end\n            end\n            SHIFTING: begin\n                Z <= {Z[0], Z[1:63]};\n                Z[63] <= x;\n                count <= count + 1;\n                if(count >= 63) begin\n                    state <= COMPLEMENTING;\n                end\n            end\n            COMPLEMENTING: begin\n                Z <= ~Z + 1;\n                state <= IDLE;\n            end\n        endcase\n    end\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ece241_2014_q5a", "completion": "reg [1:0] CS;\nreg Z;\nalways @ (posedge clk or negedge Reset) begin\n    if (!Reset) begin\n        CS <= 2'b00;\n        Z <= 1'b0;\n    end\n    else begin\n        case (CS)\n            2'b00: if (x == 1'b0) CS <= 2'b01; else CS <= 2'b10;\n            2'b01: CS <= 2'b11;\n            2'b10: CS <= 2'b00;\n            2'b11: if (x == 1'b1) CS <= 2'b11; else CS <= 2'b00;\n        endcase\n        case (CS)\n            2'b00: Z <= 1'b0;\n            2'b01: Z <= 1'b1;\n            2'b10: Z <= x;\n            2'b11: Z <= ~x;\n        endcase\n    end\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\ninput in, reset;\noutput out;\n\nalways @(posedge clk, posedge reset)\nbegin\n  if (reset)\n    state <= 2'b00;  // State A\n  else\n    state <= next_state;\nend\n\nalways @(state, in)\nbegin\n  case (state)\n    2'b00: begin // State A\n      if (in)\n        next_state = 2'b01;  // State B\n      else\n        next_state = 2'b00;  // State A\n      out = 0;\n    end\n    2'b01: begin // State B\n      if (in)\n        next_state = 2'b01;  // State B\n      else\n        next_state = 2'b10;  // State C\n      out = 0;\n    end\n    2'b10: begin // State C\n      if (in)\n        next_state = 2'b11;  // State D\n      else\n        next_state = 2'b00;  // State A\n      out = 0;\n    end\n    2'b11: begin // State D\n      if (in)\n        next_state = 2'b11;  // State D\n      else\n        next_state = 2'b01;  // State B\n      out = 1;\n    end\n  endcase\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm3", "completion": "always @(posedge clk or negedge reset) begin\n    if(reset == 0)\n        state = A;\n    else\n        case(state)\n            A:\n                if(in == 0)\n                    state = A;\n                else\n                    state = B;\n            B:\n                if(in == 0)\n                    state = C;\n                else\n                    state = B;\n            C:\n                if(in == 0)\n                    state = A;\n                else\n                    state = D;\n            D:\n                if(in == 0)\n                    state = C;\n                else\n                    state = B;\n        endcase\nend\n\nassign out = (state == D);\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\nparameter A=0, B=1, C=2, D=3;\n\ninput in, rst;\noutput out;\n\nalways @(posedge clk or posedge rst)\nbegin\n    if (rst) state <= A;\n    else state <= next_state;\nend\n\nalways @(state, in)\nbegin\n    case (state)\n        A: begin\n            if (in) next_state = B;\n            else    next_state = A;\n            out = 0;\n        end\n        B: begin\n            if (in) next_state = B;\n            else    next_state = C;\n            out = 0;\n        end\n        C: begin\n            if (in) next_state = D;\n            else    next_state = A;\n            out = 0;\n        end\n        D: begin\n            if (in) next_state = C;\n            else    next_state = B;\n            out = 1;\n        end\n    endcase\nend", "result": "failed: syntax error.", "passed": false}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\ninput clk, reset, in;\noutput reg out;\n\nalways @(posedge clk, posedge reset) begin\n    if (reset) begin\n        state <= A;\n        out <= 0;\n    end else begin\n        state <= next_state;\n        case (state)\n            A: begin\n                if (in == 0) begin\n                    next_state <= A;\n                    out <= 0;\n                end else begin\n                    next_state <= B;\n                    out <= 0;\n                end\n            end\n            B: begin\n                if (in == 0) begin\n                    next_state <= C;\n                    out <= 0;\n                end else begin\n                    next_state <= B;\n                    out <= 0;\n                end\n            end\n            C: begin\n                if (in == 0) begin\n                    next_state <= A;\n                    out <= 0;\n                end else begin\n                    next_state <= D;\n                    out <= 0;\n                end\n            end\n            D: begin\n                if (in == 0) begin\n                    next_state <= C;\n                    out <= 0;\n                end else begin\n                    next_state <= B;\n                    out <= 1;\n                end\n            end\n        endcase\n    end\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm3", "completion": "reg [1:0] state_reg, state_next;\ninput in, clk, reset;\noutput reg out;\n\nalways@(posedge clk or posedge reset)\nbegin\n  if(reset)\n    state_reg <= 2'b00;\n  else  \n    state_reg <= state_next;\nend\n\nalways@*\nbegin\n  case(state_reg)\n    2'b00 : begin out = 1'b0; if(in) state_next = 2'b01; else state_next = 2'b00; end\n    2'b01 : begin out = 1'b0; if(in) state_next = 2'b01; else state_next = 2'b10; end\n    2'b10 : begin out = 1'b0; if(in) state_next = 2'b11; else state_next = 2'b00; end\n    2'b11 : begin out = 1'b1; if(in) state_next = 2'b10; else state_next = 2'b01; end\n  endcase\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "vector2", "completion": "always @(posedge clk) begin\n  out[7:0] <= in[31:24];\n  out[15:8] <= in[23:16];\n  out[23:16] <= in[15:8];\n  out[31:24] <= in[7:0];\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "vector2", "completion": "assign {a[7:0], a[15:8], a[23:16], a[31:24]} = b;\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "vector2", "completion": "reg [31:0] reversed_data;\n\nalways@(posedge clk) begin\n  reversed_data[31:24] <= data[7:0];\n  reversed_data[23:16] <= data[15:8];\n  reversed_data[15:8] <= data[23:16];\n  reversed_data[7:0] <= data[31:24];\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "vector2", "completion": "assign r[i*8+7:i*8] = in[31-i*8:24-i*8];", "result": "failed: syntax error.", "passed": false}
{"task_id": "vector2", "completion": "assign {a[7:0], a[15:8], a[23:16], a[31:24]} = a;\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4c", "completion": "reg q;\nalways @(posedge clk)\n  if (reset)\n    q = 1'b0;\n  else\n    q = d;\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4c", "completion": "reg q, q_next;\nalways @(posedge clk) begin\n  if (reset) q <= 1'b0;\n  else       q <= q_next;\nend\nalways @* q_next = d;\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4c", "completion": "reg q;\nalways @(posedge clk)\n  if (reset)\n    q <= 1'b0;\n  else\n    q <= d;\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk)\nbegin\n    if (reset)\n        q <= 1'b0;\n    else\n        q <= d;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk)\n    if (reset)\n        q <= 1'b0;\n    else\n        q <= d;\nendmodule", "result": "failed: compile error.", "passed": false}
