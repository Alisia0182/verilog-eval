{"task_id": "mux2to1v", "completion": "assign out = (sel == 0) ? a : b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "mux2to1v", "completion": "always @(posedge clk) begin\n    if (sel == 0) begin\n        out = a;\n    end else begin\n        out = b;\n    end\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mux2to1v", "completion": "always @ (posedge clk)\nbegin\n  if (sel == 0)\n    out = a;\n  else\n    out = b;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mux2to1v", "completion": "always @(posedge clk)\nbegin\n    if(sel)\n        out <= b;\n    else\n        out <= a;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mux2to1v", "completion": "always @(posedge clk) begin\n    if (sel == 0)\n      out <= a;\n    else\n      out <= b;\n  end\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q6b", "completion": "assign Y2 = (y[3] & y[1] & ~y[0]) | (y[2] & ~y[0]);\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q6b", "completion": "always @ (posedge clk)\nbegin\n  case (y[3:1])\n    3'b000: Y2 <= x;\n    3'b001: Y2 <= ~x;\n    3'b010: Y2 <= x;\n    3'b011: Y2 <= x;\n    3'b100: Y2 <= x;\n    3'b101: Y2 <= ~x;\n    default: Y2 <= 1'b0;\n  endcase\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q6b", "completion": "assign Y2 = (y[2] == 0 && x == 1) || \n            (y[2] == 1 && x == 0) || \n            (y[2] == 2 && x == 1) || \n            (y[2] == 3 && x == 1) || \n            (y[2] == 4 && x == 1) || \n            (y[2] == 5 && x == 0);\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q6b", "completion": "always @(*) begin\n    case({y3, y2, y1})\n        3'b000: Y2 = x;\n        3'b001: Y2 = x;\n        3'b010: Y2 = x;\n        3'b011: Y2 = ~x;\n        3'b100: Y2 = ~x;\n        3'b101: Y2 = x;\n        default: Y2 = 1'b0;\n    endcase\nend", "result": "failed: syntax error.", "passed": false}
{"task_id": "m2014_q6b", "completion": "always @ (posedge clk)\nbegin\n    case(y[2])\n        3'b000: Y2 = x ? 3'b001 : 3'b000;\n        3'b001: Y2 = x ? 3'b011 : 3'b010;\n        3'b010: Y2 = x ? 3'b101 : 3'b010;\n        3'b011: Y2 = x ? 3'b110 : 3'b010;\n        3'b100: Y2 = x ? 3'b100 : 3'b101;\n        3'b101: Y2 = x ? 3'b010 : 3'b110;\n        default: Y2 = 3'b000;\n    endcase\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ringer", "completion": "always @(posedge clk) begin\n    if (ring && !vibrate_mode)\n        begin\n            ringer <= 1;\n            motor <= 0;\n        end\n    else if (vibrate_mode)\n        begin\n            ringer <= 0;\n            motor <= 1;\n        end\n    else\n        begin\n            ringer <= 1;\n            motor <= 0;\n        end\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ringer", "completion": "always @(posedge clk) begin\n    if (ring && vibrate_mode)\n        motor <= 1;\n    else if (ring)\n        ringer <= 1;\n    else\n        ringer <= 0;\n        motor <= 0;\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ringer", "completion": "always @(posedge clk) begin\n    if (ring & ~vibrate_mode)\n        begin\n            ringer <= 1;\n            motor <= 0;\n        end\n    else if (vibrate_mode)\n        begin\n            ringer <= 0;\n            motor <= 1;\n        end\n    else\n        begin\n            ringer <= 1;\n            motor <= 0;\n        end\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ringer", "completion": "always @(posedge clk) begin\n    if (ring) begin\n        if (vibrate_mode)\n            motor <= 1;\n        else\n            ringer <= 1;\n    end\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ringer", "completion": "always @(posedge clk) begin\n  if (ring) begin\n    if (vibrate_mode)\n      motor <= 1;\n    else\n      ringer <= 1;\n  end else begin\n    ringer <= 0;\n    motor <= 0;\n  end\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "alwaysblock1", "completion": "assign out = in1 & in2;\n\nalways @(*) begin\n    out_comb = in1 & in2;\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "alwaysblock1", "completion": "assign out = in1 & in2;\n\nalways @(*) begin\n    out_comb = in1 & in2;\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "alwaysblock1", "completion": "assign out = in1 & in2;\n\nalways @(*) begin\n    out_always = in1 & in2;\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "alwaysblock1", "completion": "module and_gate (\n    input a,\n    input b,\n    output y\n);\n\n// Using assign statement\nassign y = a & b;\n\n// Using combinational always block\nalways @(*) begin\n    y = a & b;\nend\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "alwaysblock1", "completion": "assign out = in1 & in2;\n\nalways @(*) begin\n    out_comb = in1 & in2;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "zero", "completion": "module always_low (\n    input wire clk,\n    output reg out\n);\n\nalways @ (posedge clk)\n    out <= 0;\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "zero", "completion": "always @ (posedge clk)\nbegin\n    output <= 1'b0;\nend\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "zero", "completion": "always @ (posedge clk)\nbegin\n  output_signal <= 1'b0;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "zero", "completion": "always @ (posedge clk) begin\n  out <= 1'b0;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "zero", "completion": "always @ (posedge clk)\n  begin\n    output <= 1'b0;\n  end\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "circuit7", "completion": "reg a, q, q_next;\nalways @(posedge clk)\nbegin\n    q <= q_next;\nend\n\nalways @(posedge clk)\nbegin\n    if (a == 0)\n        q_next <= 0;\n    else\n        q_next <= ~q;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit7", "completion": "reg q, q_next;\n\nalways @(posedge clk) begin\n    q <= q_next;\nend\n\nalways @(posedge clk) begin\n    if (a == 1'b0)\n        q_next <= q;\n    else\n        q_next <= ~q;\nend", "result": "failed: syntax error.", "passed": false}
{"task_id": "circuit7", "completion": "reg q, q_next;\n\nalways @(posedge clk) begin\n    q <= q_next;\nend\n\nalways @(posedge clk) begin\n    if (a == 0)\n        q_next <= q;\n    else\n        q_next <= ~q;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit7", "completion": "reg q, q_next;\nalways @(posedge clk)\nbegin\n    q <= q_next;\nend\n\nalways @(*)\nbegin\n    case({clk, a})\n        2'b01: q_next = 1'b0;\n        2'b10: q_next = q;\n        2'b11: q_next = 1'b1;\n        default: q_next = q;\n    endcase\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit7", "completion": "reg q, a;\nalways @(posedge clk) begin\n    if (a) begin\n        q <= 1;\n    end else begin\n        q <= 0;\n    end\nend", "result": "failed: syntax error.", "passed": false}
{"task_id": "ece241_2014_q5a", "completion": "reg [3:0] state, next_state;\nparameter S0 = 4'b0000, S1 = 4'b0001, S2 = 4'b0010, S3 = 4'b0011;\ninput x, clk, Reset;\noutput reg Z;\n\nalways @(posedge clk or posedge Reset) begin\n    if (Reset) begin\n        state <= S0;\n        Z <= 0;\n    end else begin\n        state <= next_state;\n        case (state)\n            S0: begin\n                if (x) begin\n                    next_state <= S1;\n                    Z <= 1;\n                end else begin\n                    next_state <= S0;\n                    Z <= 0;\n                end\n            end\n            S1: begin\n                if (x) begin\n                    next_state <= S1;\n                    Z <= ~Z;\n                end else begin\n                    next_state <= S2;\n                    Z <= ~Z;\n                end\n            end\n            S2: begin\n                if (x) begin\n                    next_state <= S3;\n                    Z <= ~Z;\n                end else begin\n                    next_state <= S2;\n                    Z <= ~Z;\n                end\n            end\n            S3: begin\n                next_state <= S3;\n                Z <= ~Z;\n            end\n        endcase\n    end\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ece241_2014_q5a", "completion": "reg [7:0] count;\nreg [7:0] Z;\nreg [7:0] x;\nreg Reset, clk;\n \nalways @(posedge clk or negedge Reset)\nbegin\n    if (!Reset)\n    begin\n        count <= 8'd0;\n        Z <= 8'd0;\n    end\n    else if (count < 8)\n    begin\n        Z <= Z - x + 1;\n        count <= count + 1;\n    end\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ece241_2014_q5a", "completion": "module serial_2s_complementer (\n    input x,\n    input reset,\n    input clk,\n    output reg Z\n);\n\nreg [2:0] state;\n\nparameter INIT = 3'b000;\nparameter COMP = 3'b001;\nparameter STOP = 3'b010;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= INIT;\n    else begin\n        case (state)\n            INIT: begin\n                Z <= 1'b0;\n                if (x)\n                    state <= COMP;\n            end\n            COMP: begin\n                Z <= ~x + 1;\n                if (x)\n                    state <= STOP;\n            end\n            STOP: state <= STOP;\n        endcase\n    end\nend\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "ece241_2014_q5a", "completion": "reg [2:0] state, next_state;\nreg Z;\nreg [2:0] count;\nreg [31:0] x;\n\nalways @ (posedge clk or negedge Reset)\n  if (!Reset)\n    state <= 3'b000;\n  else\n    state <= next_state;\n\nalways @ *\n  case (state)\n    3'b000: begin\n              Z <= x[0];\n              count <= 1;\n              next_state <= 3'b001;\n            end\n    3'b001: begin\n              Z <= ~x[count] + 1;\n              count <= count + 1;\n              if (count == 3)\n                next_state <= 3'b000;\n              else\n                next_state <= 3'b001;\n            end\n  endcase\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ece241_2014_q5a", "completion": "module serial_complementer(\n  input wire clk,\n  input wire reset,\n  input wire x,\n  output reg Z\n  );\n\n  typedef enum logic [1:0] {\n    S0, S1\n  } state_t;\n\n  reg state_t state, next_state;\n\n  always @(posedge clk or negedge reset) begin\n    if (!reset) begin\n      state <= S0;\n    end else begin\n      state <= next_state;\n    end\n  end\n\n  always @* begin\n    case (state)\n      S0: begin\n        Z <= x;\n        next_state <= S1;\n      end\n      S1: begin\n        Z <= ~x + 1;\n        next_state <= S0;\n      end\n    endcase\n  end\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\nreg output;\ninput clk, reset, in;\nalways @(posedge clk or posedge reset) begin\n  if (reset)\n    state <= 2'b00;\n  else\n    state <= next_state;\nend\nalways @* begin\n  case(state)\n    2'b00: begin\n      next_state = in ? 2'b01 : 2'b10;\n      output = 1'b0;\n    end\n    2'b01: begin\n      next_state = in ? 2'b10 : 2'b01;\n      output = 1'b0;\n    end\n    2'b10: begin\n      next_state = in ? 2'b00 : 2'b11;\n      output = 1'b0;\n    end\n    2'b11: begin\n      next_state = in ? 2'b10 : 2'b01;\n      output = 1'b1;\n    end\n  endcase\nend\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\nreg output;\ninput clk, reset, in;\nalways @(posedge clk or posedge reset)\nbegin\n  if (reset)\n    state <= 2'b00;\n  else\n    state <= next_state;\nend\n\nalways @(*)\nbegin\n  case (state)\n    2'b00: begin\n      next_state = in ? 2'b10 : 2'b01;\n      output = 1'b0;\n    end\n    2'b01: begin\n      next_state = in ? 2'b11 : 2'b01;\n      output = 1'b0;\n    end\n    2'b10: begin\n      next_state = in ? 2'b00 : 2'b10;\n      output = 1'b0;\n    end\n    2'b11: begin\n      next_state = in ? 2'b10 : 2'b01;\n      output = 1'b1;\n    end\n    default: begin\n      next_state = 2'b00;\n      output = 1'b0;\n    end\n  endcase\nend\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\nreg output;\ninput reset, clk, in;\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk or posedge reset)\nbegin\n    if (reset)\n        state <= A;\n    else\n        state <= next_state;\nend\n\nalways @*\nbegin\n    case(state)\n        A: begin\n            next_state = (in) ? B : A;\n            output = 0;\n        end\n        B: begin\n            next_state = (in) ? B : C;\n            output = 0;\n        end\n        C: begin\n            next_state = (in) ? D : A;\n            output = 0;\n        end\n        D: begin\n            next_state = (in) ? B : C;\n            output = 1;\n        end\n        default: next_state = A;\n    endcase\nend\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\nreg output;\ninput clk, reset, in;\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= A;\n    else\n        state <= next_state;\nend\n\nalways @* begin\n    case (state)\n        A: begin\n            if (in)\n                next_state = B;\n            else\n                next_state = A;\n            output = 1'b0;\n        end\n        B: begin\n            if (in)\n                next_state = B;\n            else\n                next_state = C;\n            output = 1'b0;\n        end\n        C: begin\n            if (in)\n                next_state = D;\n            else\n                next_state = A;\n            output = 1'b0;\n        end\n        D: begin\n            if (in)\n                next_state = B;\n            else\n                next_state = C;\n            output = 1'b1;\n        end\n        default: next_state = A;\n    endcase\nend\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\nreg output;\n\nalways @ (posedge clk or negedge reset)\nbegin\n  if (!reset)\n    state <= 2'b00; // State A\n  else\n    state <= next_state;\nend\n\nalways @ (*)\nbegin\n  case (state)\n    2'b00: begin // State A\n      if (in)\n        next_state = 2'b01; // Next state B\n      else\n        next_state = 2'b00; // Next state A\n      output = 1'b0;\n    end\n    2'b01: begin // State B\n      if (in)\n        next_state = 2'b10; // Next state C\n      else\n        next_state = 2'b01; // Next state B\n      output = 1'b0;\n    end\n    2'b10: begin // State C\n      if (in)\n        next_state = 2'b00; // Next state A\n      else\n        next_state = 2'b11; // Next state D\n      output = 1'b0;\n    end\n    2'b11: begin // State D\n      if (in)\n        next_state = 2'b10; // Next state C\n      else\n        next_state = 2'b01; // Next state B\n      output = 1'b1;\n    end\n  endcase\nend\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "vector2", "completion": "reg [31:0] input_vector;\nreg [31:0] output_vector;\n\nalways @ (posedge clk)\nbegin\n    output_vector[31:24] <= input_vector[7:0];\n    output_vector[23:16] <= input_vector[15:8];\n    output_vector[15:8] <= input_vector[23:16];\n    output_vector[7:0] <= input_vector[31:24];\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "vector2", "completion": "reg [7:0] tmp[3:0];\n\nalways @(posedge clk) begin\n    tmp[0] <= data[7:0];\n    tmp[1] <= data[15:8];\n    tmp[2] <= data[23:16];\n    tmp[3] <= data[31:24];\n    result <= {tmp[3], tmp[2], tmp[1], tmp[0]};\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "vector2", "completion": "reg [7:0] temp;\n\nalways @(posedge clk)\nbegin\n    temp[7:0] <= data[31:24];\n    temp[15:8] <= data[23:16];\n    temp[23:16] <= data[15:8];\n    temp[31:24] <= data[7:0];\nend\n\nassign output = temp;\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "vector2", "completion": "reg [31:0] in_data;\nreg [31:0] out_data;\n\nalways @ (posedge clk)\nbegin\n    out_data <= {in_data[7:0], in_data[15:8], in_data[23:16], in_data[31:24]};\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "vector2", "completion": "reg [31:0] input;\nreg [31:0] output;\n\nalways @ (posedge clk)\nbegin\n    output[31:24] <= input[7:0];\n    output[23:16] <= input[15:8];\n    output[15:8] <= input[23:16];\n    output[7:0] <= input[31:24];\nend\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk or posedge rst)\nbegin\n  if (rst)\n    Q <= 1'b0;\n  else\n    Q <= D;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk or posedge rst)\nbegin\n  if (rst)\n    q <= 1'b0;\n  else\n    q <= d;\nend", "result": "failed: syntax error.", "passed": false}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset) begin\n        q <= 1'b0;\n    end else begin\n        q <= d;\n    end\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk or posedge rst)\nbegin\n  if (rst)\n    Q <= 0;\n  else\n    Q <= D;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4c", "completion": "reg q, qn;\n\nalways @(posedge clk or posedge rst)\nbegin\n    if (rst)\n        begin\n            q <= 1'b0;\n            qn <= 1'b1;\n        end\n    else\n        begin\n            q <= d;\n            qn <= ~d;\n        end\nend\nendmodule", "result": "failed: compile error.", "passed": false}
