{"task_id": "mux2to1v", "completion": "module mux2to1 (\n    input a,\n    input b,\n    input sel,\n    output reg out\n);\n\nalways @ (posedge sel)\nbegin\n    if (sel == 0)\n        out <= a;\n    else\n        out <= b;\nend\n\nendmodule"}
{"task_id": "mux2to1v", "completion": "always @(posedge clk) begin\n    if (sel == 0) begin\n        out = a;\n    end else begin\n        out = b;\n    end\nendmodule"}
{"task_id": "mux2to1v", "completion": "module multiplexer(\n    input a,\n    input b,\n    input sel,\n    output out\n);\n\nassign out = (sel == 1'b0) ? a : b;\n\nendmodule"}
{"task_id": "mux2to1v", "completion": "always @(posedge clk)\nbegin\n    if (sel == 1'b0)\n        out = a;\n    else\n        out = b;\nend\n\nendmodule"}
{"task_id": "mux2to1v", "completion": "always @(posedge clk)\nbegin\n    if (sel == 1'b0)\n        out = a;\n    else\n        out = b;\nend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "always @(posedge clk) begin\n    case (y[2:1])\n        2'b00: Y2 <= x ? 1'b0 : 1'b1;\n        2'b01: Y2 <= x ? 1'b0 : 1'b1;\n        2'b10: Y2 <= x ? 1'b0 : 1'b1;\n        2'b11: Y2 <= x ? 1'b1 : 1'b0;\n        default: Y2 <= 1'b0;\n    endcase\nend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "always @(posedge clk)\nbegin\n    case({y[2], input})\n        2'b00: next_state = (input) ? 3'b101 : 3'b001;\n        2'b01: next_state = (input) ? 3'b100 : 3'b110;\n        2'b10: next_state = (input) ? 3'b110 : 3'b101;\n        2'b11: next_state = (input) ? 3'b011 : 3'b110;\n    endcase\nend"}
{"task_id": "m2014_q6b", "completion": "always @(posedge clk)\nbegin\n    case({y[2], x})\n        2'b00: Y2 <= 1'b0;\n        2'b01: Y2 <= 1'b0;\n        2'b10: Y2 <= 1'b0;\n        2'b11: Y2 <= 1'b1;\n        default: Y2 <= 1'b0;\n    endcase\nend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "always @(*) begin\n    case (y[3:1])\n        3'b000: Y2 = x;\n        3'b001: Y2 = x;\n        3'b010: Y2 = x;\n        3'b011: Y2 = ~x;\n        3'b100: Y2 = x;\n        3'b101: Y2 = ~x;\n        default: Y2 = 1'b0;\n    endcase\nend"}
{"task_id": "m2014_q6b", "completion": "always @(*) begin\n    case(y[3:1])\n        3'b000: Y2 = x;\n        3'b001: Y2 = x;\n        3'b010: Y2 = x;\n        3'b011: Y2 = ~x;\n        3'b100: Y2 = ~x;\n        3'b101: Y2 = ~x;\n        default: Y2 = 1'b0; // Default state\n    endcase\nend"}
{"task_id": "ringer", "completion": "always @(posedge clk)\nbegin\n    if (vibrate_mode)\n        motor <= 1;\n    else\n        ringer <= 1;\nend\n\nalways @(posedge clk)\nbegin\n    if (ring)\n    begin\n        ringer <= 1;\n        motor <= 0;\n    end\n    else\n    begin\n        ringer <= 0;\n        motor <= 0;\n    end\nend\n\nassign ringer = 1'b0;\nassign motor = 1'b0;\nendmodule"}
{"task_id": "ringer", "completion": "always @(posedge clk) begin\n    if (vibrate_mode)\n        motor <= 1;\n    else\n        ringer <= 1;\nend\n\nalways @(posedge clk) begin\n    if (ring)\n        if (vibrate_mode)\n            ringer <= 0;\n        else\n            motor <= 0;\n    else begin\n        ringer <= 0;\n        motor <= 0;\n    end\nend\n\nassign ringer = 0;\nassign motor = 0;\nendmodule"}
{"task_id": "ringer", "completion": "always @(posedge clk)\nbegin\n    if (vibrate_mode)\n        motor <= 1;\n    else\n        ringer <= 1;\nend\n\nalways @(posedge clk)\nbegin\n    if (ring)\n    begin\n        if (vibrate_mode)\n            ringer <= 0;\n        else\n            motor <= 0;\n    end\nend\n\nalways @(posedge clk)\nbegin\n    if (!ring)\n    begin\n        ringer <= 0;\n        motor <= 0;\n    end\nend\n\nendmodule"}
{"task_id": "ringer", "completion": "always @(posedge clk) begin\n    if (vibrate_mode)\n        motor <= 1;\n    else\n        ringer <= 1;\nend\n\nalways @(posedge clk) begin\n    if (ring)\n        ringer <= 1;\n    else\n        ringer <= 0;\nend\n\nalways @(posedge clk) begin\n    if (ring)\n        motor <= 0;\n    else\n        motor <= 1;\nend\nendmodule"}
{"task_id": "ringer", "completion": "always @(posedge clk) begin\n    if (vibrate_mode)\n        motor <= 1;\n    else\n        ringer <= 1;\nend\n\nalways @(posedge clk) begin\n    if (ring)\n        if (vibrate_mode)\n            ringer <= 0;\n        else\n            motor <= 0;\nend\nendmodule"}
{"task_id": "alwaysblock1", "completion": "module and_gate(\n    input a,\n    input b,\n    output y\n);\n\nassign y = a & b;\n\nalways @* begin\n    y = a & b;\nend\n\nendmodule"}
{"task_id": "alwaysblock1", "completion": "module and_gate(\n    input a,\n    input b,\n    output y\n);\n\nassign y = a & b;\n\nalways @(*)\nbegin\n    y = a & b;\nend\n\nendmodule"}
{"task_id": "alwaysblock1", "completion": "module and_gate (\n    input wire a,\n    input wire b,\n    output wire y\n);\n\nassign y = a & b;\n\nalways @* begin\n    y = a & b;\nend\n\nendmodule"}
{"task_id": "alwaysblock1", "completion": "module and_gate (\n    input wire a,\n    input wire b,\n    output reg y\n);\n\n// Using assign statement\nassign y = a & b;\n\n// Using combinational always block\nalways @(*) begin\n    y = a & b;\nend\n\nendmodule"}
{"task_id": "alwaysblock1", "completion": "module and_gate (\n    input a,\n    input b,\n    output y\n);\n\nassign y = a & b;\n\nalways @* begin\n    y = a & b;\nend\n\nendmodule"}
{"task_id": "zero", "completion": "always @ (posedge clk)\nbegin\n    output_reg <= 1'b0;\nend\nendmodule"}
{"task_id": "zero", "completion": "always @ (posedge clk)\nbegin\n    output_signal <= 1'b0;\nend"}
{"task_id": "zero", "completion": "always @(posedge clk)\n    out <= 1'b0;\nendmodule"}
{"task_id": "zero", "completion": "module always_low;\n  reg out;\n\n  always @(*) begin\n    out = 0;\n  end\n\nendmodule"}
{"task_id": "zero", "completion": "always @ (posedge clk)\nbegin\n    output = 0;\nend"}
{"task_id": "circuit7", "completion": "reg q;\n\nalways @(posedge clk) begin\n    if (a == 1'b1)\n        q <= ~q;\nend"}
{"task_id": "circuit7", "completion": "reg q;\n\nalways @(posedge clk) begin\n    if (a)\n        q <= 1;\n    else\n        q <= 0;\nend"}
{"task_id": "circuit7", "completion": "reg q;\n\nalways @(posedge clk)\nbegin\n    if (a)\n        q <= 1;\n    else\n        q <= 0;\nend\n\nendmodule"}
{"task_id": "circuit7", "completion": "reg q;\n\nalways @(posedge clk)\nbegin\n    if (a)\n        q <= 1;\n    else\n        q <= 0;\nend"}
{"task_id": "circuit7", "completion": "reg q, q_next;\nalways @(posedge clk)\nbegin\n    q <= q_next;\nend\n\nalways @(posedge clk)\nbegin\n    if (a == 1'b0)\n        q_next <= 1'b0;\n    else if (a == 1'b1)\n        q_next <= ~q;\nend\nendmodule"}
{"task_id": "ece241_2014_q5a", "completion": "reg [7:0] count;\nreg [7:0] neg_x;\nreg [7:0] Z;\nreg Reset, clk;\nwire Start;\n\nassign Start = ~Reset;\n\nalways @(posedge clk or negedge Reset) begin\n    if (~Reset) begin\n        count <= 8'b0;\n        neg_x <= 8'b0;\n        Z <= 8'b0;\n    end\n    else begin\n        if (Start) begin\n            count <= 8'b0;\n            neg_x <= 8'b0;\n            Z <= 8'b0;\n        end\n        else begin\n            count <= count + 1;\n            if (count == 8'b11111111) begin\n                Z <= neg_x;\n            end\n            else begin\n                neg_x <= neg_x | (x[count] << count);\n            end\n        end\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "completion": "module serial_2s_complementer (\n    input wire clk,\n    input wire reset,\n    input wire x,\n    output reg Z\n);\n\n    // State declaration\n    reg [1:0] state;\n    parameter S_IDLE = 2'b00;\n    parameter S_COMPLEMENT = 2'b01;\n\n    // State transition\n    always @(posedge clk or posedge reset)\n    begin\n        if (reset)\n            state <= S_IDLE;\n        else\n            case (state)\n                S_IDLE: if (!reset) state <= S_COMPLEMENT;\n                S_COMPLEMENT: if (!reset) state <= S_IDLE;\n                default: state <= S_IDLE;\n            endcase\n    end\n\n    // Output logic\n    always @(posedge clk or posedge reset)\n    begin\n        if (reset)\n            Z <= 1'b0;\n        else\n            case (state)\n                S_IDLE: Z <= 1'b0;\n                S_COMPLEMENT: Z <= ~Z;\n                default: Z <= 1'b0;\n            endcase\n    end\nendmodule"}
{"task_id": "ece241_2014_q5a", "completion": "reg [3:0] state, next_state;\nreg output, next_output;\nparameter IDLE = 4'b0000, CONVERT = 4'b0001;\nalways @(posedge clk or negedge reset) begin\n    if (~reset) begin\n        state <= IDLE;\n        output <= 1'b0;\n    end\n    else begin\n        state <= next_state;\n        output <= next_output;\n    end\nend\n\nalways @(state, x) begin\n    case (state)\n        IDLE: begin\n            if (reset) begin\n                next_state = IDLE;\n                next_output = 1'b0;\n            end\n            else begin\n                next_state = CONVERT;\n                next_output = 1'b0;\n            end\n        end\n        CONVERT: begin\n            if (x) begin\n                next_state = CONVERT;\n                next_output = ~output;\n            end\n            else begin\n                next_state = IDLE;\n                next_output = output;\n            end\n        end\n    endcase\nend\n\nassign Z = output;\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "completion": "reg [1:0] state, next_state;\nparameter IDLE = 2'b00, CONVERT = 2'b01, COMPLEMENT = 2'b10;\nreg [1:0] count;\nreg Z;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= IDLE;\n    else\n        state <= next_state;\nend\n\nalways @(state) begin\n    case (state)\n        IDLE: begin\n            Z <= 0;\n            count <= 0;\n            if (reset)\n                next_state <= IDLE;\n            else if (start)\n                next_state <= CONVERT;\n            else\n                next_state <= IDLE;\n        end\n        CONVERT: begin\n            count <= count + 1;\n            if (reset)\n                next_state <= IDLE;\n            else if (count == 2'b01)\n                next_state <= COMPLEMENT;\n            else\n                next_state <= CONVERT;\n        end\n        COMPLEMENT: begin\n            Z <= ~x + 1;\n            next_state <= IDLE;\n        end\n        default: next_state <= IDLE;\n    endcase\nend\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "completion": "reg [2:0] state, next_state;\nparameter S0 = 3'b000, S1 = 3'b001, S2 = 3'b010, S3 = 3'b011;\nreg Z;\n\nalways @(posedge clk or negedge Reset) begin\n    if (~Reset) begin\n        state <= S0;\n        Z <= 1'b0;\n    end\n    else begin\n        state <= next_state;\n        case(state)\n            S0: begin\n                if (x) begin\n                    Z <= 1'b1;\n                    next_state <= S1;\n                end\n                else begin\n                    Z <= 1'b0;\n                    next_state <= S0;\n                end\n            end\n            S1: begin\n                if (x) begin\n                    Z <= 1'b0;\n                    next_state <= S1;\n                end\n                else begin\n                    Z <= 1'b1;\n                    next_state <= S2;\n                end\n            end\n            S2: begin\n                if (x) begin\n                    Z <= 1'b1;\n                    next_state <= S1;\n                end\n                else begin\n                    Z <= 1'b0;\n                    next_state <= S3;\n                end\n            end\n            S3: begin\n                if (x) begin\n                    Z <= 1'b0;\n                    next_state <= S1;\n                end\n                else begin\n                    Z <= 1'b1;\n                    next_state <= S3;\n                end\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\nreg output;\ninput reset, clk, in;\noutput out;\n\nalways @(posedge clk or posedge reset)\nbegin\n    if (reset)\n        state <= 2'b00;\n    else\n        state <= next_state;\nend\n\nalways @*\nbegin\n    case(state)\n        2'b00: begin\n            next_state = in ? 2'b10 : 2'b01;\n            output = 1'b0;\n        end\n        2'b01: begin\n            next_state = in ? 2'b10 : 2'b01;\n            output = 1'b0;\n        end\n        2'b10: begin\n            next_state = in ? 2'b00 : 2'b11;\n            output = 1'b0;\n        end\n        2'b11: begin\n            next_state = in ? 2'b10 : 2'b01;\n            output = 1'b1;\n        end\n        default: begin\n            next_state = 2'b00;\n            output = 1'b0;\n        end\n    endcase\nend\n\nassign out = output;\nendmodule"}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\nreg output;\ninput clk, reset, in;\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= 2'b00;\n    else\n        state <= next_state;\nend\n\nalways @* begin\n    case(state)\n        2'b00: begin // State A\n            next_state = in ? 2'b10 : 2'b01;\n            output = 1'b0;\n        end\n        2'b01: begin // State B\n            next_state = in ? 2'b01 : 2'b10;\n            output = 1'b0;\n        end\n        2'b10: begin // State C\n            next_state = in ? 2'b00 : 2'b11;\n            output = 1'b0;\n        end\n        2'b11: begin // State D\n            next_state = in ? 2'b10 : 2'b01;\n            output = 1'b1;\n        end\n        default: next_state = 2'b00;\n    endcase\nend\n\nendmodule"}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\nreg output;\ninput reset, clk, in;\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= 2'b00;\n    else\n        state <= next_state;\nend\nalways @(*) begin\n    case (state)\n        2'b00: begin\n            next_state = in ? 2'b01 : 2'b10;\n            output = 1'b0;\n        end\n        2'b01: begin\n            next_state = in ? 2'b11 : 2'b01;\n            output = 1'b0;\n        end\n        2'b10: begin\n            next_state = in ? 2'b00 : 2'b11;\n            output = 1'b0;\n        end\n        2'b11: begin\n            next_state = in ? 2'b10 : 2'b01;\n            output = 1'b1;\n        end\n    endcase\nend"}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\nreg output;\ninput clk, reset, in;\n \nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= 2'b00;\n    else\n        state <= next_state;\nend\n \nalways @(state, in) begin\n    case (state)\n        2'b00: begin\n            next_state = in ? 2'b10 : 2'b01;\n            output = 1'b0;\n        end\n        2'b01: begin\n            next_state = in ? 2'b10 : 2'b01;\n            output = 1'b0;\n        end\n        2'b10: begin\n            next_state = in ? 2'b00 : 2'b11;\n            output = 1'b0;\n        end\n        2'b11: begin\n            next_state = in ? 2'b10 : 2'b01;\n            output = 1'b1;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\nreg output;\ninput clk, reset, in;\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= 2'b00;\n    else\n        state <= next_state;\nend\n\nalways @(*) begin\n    case(state)\n        2'b00: begin\n            next_state = (in) ? 2'b10 : 2'b01;\n            output = 1'b0;\n        end\n        2'b01: begin\n            next_state = (in) ? 2'b10 : 2'b01;\n            output = 1'b0;\n        end\n        2'b10: begin\n            next_state = (in) ? 2'b00 : 2'b11;\n            output = 1'b0;\n        end\n        2'b11: begin\n            next_state = (in) ? 2'b10 : 2'b01;\n            output = 1'b1;\n        end\n        default: begin\n            next_state = 2'b00;\n            output = 1'b0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "vector2", "completion": "module reverse_byte_order(\n    input [31:0] in_vector,\n    output [31:0] out_vector\n);\n\nreg [7:0] byte0, byte1, byte2, byte3;\n\nassign byte0 = in_vector[7:0];\nassign byte1 = in_vector[15:8];\nassign byte2 = in_vector[23:16];\nassign byte3 = in_vector[31:24];\n\nassign out_vector = {byte3, byte2, byte1, byte0};\n\nendmodule"}
{"task_id": "vector2", "completion": "module reverse_byte_order(\n    input [31:0] in_vector,\n    output reg [31:0] out_vector\n);\n\nalways @ (posedge clk)\n    out_vector <= {in_vector[7:0], in_vector[15:8], in_vector[23:16], in_vector[31:24]};\n\nendmodule"}
{"task_id": "vector2", "completion": "module byte_reverse(\n    input [31:0] in_vector,\n    output reg [31:0] out_vector\n);\n\nalways @(*) begin\n    out_vector[7:0] = in_vector[31:24];\n    out_vector[15:8] = in_vector[23:16];\n    out_vector[23:16] = in_vector[15:8];\n    out_vector[31:24] = in_vector[7:0];\nend\n\nendmodule"}
{"task_id": "vector2", "completion": "module reverse_byte_order(\n    input [31:0] in_data,\n    output [31:0] out_data\n);\n\nreg [7:0] byte0, byte1, byte2, byte3;\n\nassign byte0 = in_data[7:0];\nassign byte1 = in_data[15:8];\nassign byte2 = in_data[23:16];\nassign byte3 = in_data[31:24];\n\nassign out_data = {byte0, byte1, byte2, byte3};\n\nendmodule"}
{"task_id": "vector2", "completion": "module byte_reverser(\n    input [31:0] input_vector,\n    output reg [31:0] output_vector\n);\n\n    always @ (posedge clk)\n        output_vector <= {input_vector[7:0], input_vector[15:8], input_vector[23:16], input_vector[31:24]};\n\nendmodule"}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 0;\n    else\n        q <= d;\nend"}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset) begin\n        q <= 0;\n    end else begin\n        q <= d;\n    end\nend"}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 0;\n    else\n        q <= d;\nend\nendmodule"}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk or posedge reset)\nbegin\n    if (reset)\n        q <= 1'b0;\n    else\n        q <= d;\nend"}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 1'b0;\n    else\n        q <= d;\nend\nendmodule"}
