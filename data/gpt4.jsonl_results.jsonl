{"task_id": "gatesv", "completion": "always @(*) begin\n    out_both[0] = in[0] & in[1];\n    out_both[1] = in[1] & in[2];\n    out_both[2] = in[2] & in[3];\n    out_any[1] = in[1] | in[2];\n    out_any[2] = in[2] | in[3];\n    out_any[3] = in[3] | in[0];\n    out_different[0] = in[0] ^ in[1];\n    out_different[1] = in[1] ^ in[2];\n    out_different[2] = in[2] ^ in[3];\n    out_different[3] = in[3] ^ in[0];\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "gatesv", "completion": "reg [2:0] out_both;\nreg [3:1] out_any;\nreg [3:0] out_different;\nalways @(posedge clk) begin\n    out_both <= in[3:1] & in[2:0];\n    out_any <= in[3:1] | in[2:0];\n    out_different <= in ^ {in[2:0], in[3]};\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "rotate100", "completion": "always @(posedge clk) begin\n    if (load)\n        q <= data;\n    else begin\n        if (ena[0])\n            q <= {q[98:0], q[99]};\n        if (ena[1])\n            q <= {q[0], q[99:1]};\n    end\nend\nendmodule", "result": "failed: 3610 out of 4005 samples.", "passed": false}
{"task_id": "rotate100", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        if (ena[1]) begin\n            q[99:1] <= q[98:0];\n            q[0] <= q[99];\n        end \n        if (ena[0]) begin\n            q[98:0] <= q[99:1];\n            q[99] <= q[0];\n        end\n    end\nend\nendmodule", "result": "failed: 3576 out of 4005 samples.", "passed": false}
{"task_id": "review2015_fsmonehot", "completion": "wire [2:0] state_bits;\nassign state_bits = {state[9], state[8], state[7]};\nassign B3_next = (state_bits == 3'b111) & ~ack;\nassign S_next = (state_bits == 3'b001) & ack;\nassign S1_next = (state_bits == 3'b010) & ~ack;\nassign Count_next = (state_bits == 3'b011);\nassign Wait_next = (state_bits == 3'b100) & ~done_counting;\nassign done = (state_bits == 3'b100) & done_counting;\nassign counting = (state_bits == 3'b011);\nassign shift_ena = (state_bits == 3'b000) & d;\nendmodule", "result": "failed: 3217 out of 3303 samples.", "passed": false}
{"task_id": "review2015_fsmonehot", "completion": "reg B3_next, S_next, S1_next, Count_next, Wait_next, done, counting, shift_ena;\nalways @(*) begin\n    B3_next = (state[8] & done_counting) | (state[0] & d);\n    S_next = (state[1] & !d);\n    S1_next = (state[2] & d);\n    Count_next = (state[3] & !d) | (state[9] & ack);\n    Wait_next = (state[4] & done_counting) | (state[5] & !done_counting);\n    done = (state[6] & done_counting);\n    counting = (state[7] & !done_counting);\n    shift_ena = (state[9] & ack) | (state[0] & d);\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff8ar", "completion": "always @(posedge clk or posedge areset)\n    if (areset)\n        q <= 8'b0;\n    else\n        q <= d;\nendmodule", "result": "passed", "passed": true}
{"task_id": "dff8ar", "completion": "always @(posedge clk or posedge areset) begin\n    if (areset)\n        q <= 8'b0;\n    else\n        q <= d;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap3", "completion": "always @(*) begin\n    if (a & b) begin\n        out = c | d;\n    end\n    else begin\n        out = c & d;\n    end\nend\nendmodule", "result": "failed: 60 out of 232 samples.", "passed": false}
{"task_id": "kmap3", "completion": "always @(posedge clk) begin\n    if (a && b) begin\n        out <= c;\n    end else begin\n        out <= d;\n    end\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "lemmings1", "completion": "reg [1:0] state, next_state;\nlocalparam LEFT = 2'b01;\nlocalparam RIGHT = 2'b10;\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        state <= LEFT;\n    else\n        state <= next_state;\nend\nalways @(*) begin\n    case (state)\n        LEFT: next_state = bump_left ? RIGHT : LEFT;\n        RIGHT: next_state = bump_right ? LEFT : RIGHT;\n        default: next_state = LEFT;\n    endcase\nend\nassign walk_left = (state == LEFT);\nassign walk_right = (state == RIGHT);\nendmodule", "result": "passed", "passed": true}
{"task_id": "lemmings1", "completion": "reg [1:0] state, next_state;\nparameter LEFT = 2'b00, RIGHT = 2'b01, STOP = 2'b10;\nalways @(posedge clk or posedge areset) begin\n    if (areset)\n        state <= LEFT;\n    else\n        state <= next_state;\nend\nalways @(*) begin\n    case (state)\n        LEFT: \n            if (bump_left)\n                next_state = RIGHT;\n            else\n                next_state = LEFT;\n        RIGHT: \n            if (bump_right)\n                next_state = LEFT;\n            else\n                next_state = RIGHT;\n        default: \n            next_state = LEFT;\n    endcase\nend\nassign walk_left = (state == LEFT);\nassign walk_right = (state == RIGHT);\nendmodule", "result": "passed", "passed": true}
{"task_id": "2013_q2afsm", "completion": "reg [3:1] g;\nalways @(posedge clk or negedge resetn) begin\n    if (!resetn)\n        g <= 0;\n    else\n        g <= r;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2013_q2afsm", "completion": "reg [3:1] g;\nalways @(posedge clk or negedge resetn) begin\n    if (!resetn) begin\n        g <= 3'b000;\n    end else begin\n        g <= r;\n    end\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm_hdlc", "completion": "reg [1:0] state, next_state;\nreg disc_reg, flag_reg, err_reg;\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 2'b00;\n    end else begin\n        state <= next_state;\n    end\nend\nalways @(*) begin\n    next_state = state;\n    disc_reg = 0;\n    flag_reg = 0;\n    err_reg = 0;\n    case (state)\n        2'b00: begin\n            if (in) begin\n                next_state = 2'b01;\n            end\n        end\n        2'b01: begin\n            if (!in) begin\n                next_state = 2'b10;\n            end else begin\n                next_state = 2'b00;\n                flag_reg = 1;\n            end\n        end\n        2'b10: begin\n            if (in) begin\n                next_state = 2'b11;\n                disc_reg = 1;\n            end else begin\n                next_state = 2'b00;\n                err_reg = 1;\n            end\n        end\n        2'b11: begin\n            if (!in) begin\n                next_state = 2'b00;\n            end\n        end\n    endcase\nend\nassign disc = disc_reg;\nassign flag = flag_reg;\nassign err = err_reg;\nendmodule", "result": "failed: 397 out of 801 samples.", "passed": false}
{"task_id": "fsm_hdlc", "completion": "reg [1:0] state, next_state;\nreg disc_reg, flag_reg, err_reg;\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 2'b00;\n    end else begin\n        state <= next_state;\n    end\nend\nalways @* begin\n    next_state = state;\n    disc_reg = 0;\n    flag_reg = 0;\n    err_reg = 0;\n    case (state)\n        2'b00: begin\n            if (in) next_state = 2'b01;\n        end\n        2'b01: begin\n            if (in) next_state = 2'b10;\n            else next_state = 2'b00;\n        end\n        2'b10: begin\n            if (!in) next_state = 2'b11;\n            else err_reg = 1;\n        end\n        2'b11: begin\n            if (in) next_state = 2'b01;\n            else disc_reg = 1;\n        end\n        default: next_state = 2'b00;\n    endcase\n    if (state == 2'b10 && !in) flag_reg = 1;\nend\nassign disc = disc_reg;\nassign flag = flag_reg;\nassign err = err_reg;\nendmodule", "result": "failed: 390 out of 801 samples.", "passed": false}
{"task_id": "bugs_mux2", "completion": "always @(*) begin\n    if (sel) \n        out = a;\n    else \n        out = b;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "bugs_mux2", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset) begin\n        out <= 8'b0;\n    end else if (sel) begin\n        out <= a;\n    end else begin\n        out <= b;\n    end\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "review2015_count1k", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset) begin\n        q <= 10'b0;\n    end else begin\n        q <= q + 1;\n    end\nend\nendmodule", "result": "failed: 3131 out of 8027 samples.", "passed": false}
{"task_id": "review2015_count1k", "completion": "reg [9:0] count;\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        count <= 10'b0;\n    else\n        count <= count + 1;\nend\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        q <= 10'b0;\n    else\n        q <= count;\nend\nendmodule", "result": "failed: 8000 out of 8027 samples.", "passed": false}
