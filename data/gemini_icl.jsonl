{"task_id": "ece241_2014_q5a", "completion": "reg [1:0] state;\nreg [1:0] next_state;\nreg Z;\nreg next_Z;\n\nalways @(posedge clk or negedge reset) begin\n    if (~reset) begin\n        state <= 2'b00;\n        Z <= 1'b0;\n    end else begin\n        state <= next_state;\n        Z <= next_Z;\n    end\nend\n\nalways @* begin\n    case (state)\n        2'b00: begin\n            next_Z = ~x;\n            if (x) next_state = 2'b01;\n            else next_state = 2'b00;\n        end\n        2'b01: begin\n            next_Z = x;\n            if (x) next_state = 2'b11;\n            else next_state = 2'b10;\n        end\n        2'b10: begin\n            next_Z = ~x;\n            if (x) next_state = 2'b11;\n            else next_state = 2'b10;\n        end\n        2'b11: begin\n            next_Z = x;\n            next_state = 2'b00;\n        end\n    endcase\nend\n\nassign Z_out = Z;\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "completion": "always @(posedge clk or negedge Reset)\nbegin\n    if (~Reset)\n    begin\n        state <= S0;\n        Z <= 1'b0;\n    end\n    else\n    begin\n        case (state)\n            S0: \n            begin\n                if (x) \n                begin\n                    Z <= 1'b1;\n                    state <= S1;\n                end\n                else \n                begin\n                    Z <= 1'b0;\n                    state <= S0;\n                end\n            end\n            S1: \n            begin\n                if (x) \n                begin\n                    Z <= 1'b0;\n                    state <= S0;\n                end\n                else \n                begin\n                    Z <= 1'b1;\n                    state <= S1;\n                end\n            end\n        endcase\n    end\nend\nendmodule"}
{"task_id": "ece241_2014_q5a", "completion": "always @(posedge clk or posedge rst)\nbegin\n    if (rst) begin\n        state <= S0;\n        z <= 0;\n    end else begin\n        case (state)\n            S0: begin\n                if (x) begin\n                    z <= 1;\n                    state <= S1;\n                end else begin\n                    z <= 0;\n                    state <= S0;\n                end\n            end\n            S1: begin\n                if (x) begin\n                    z <= 1;\n                    state <= S1;\n                end else begin\n                    z <= 0;\n                    state <= S2;\n                end\n            end\n            S2: begin\n                z <= ~x;\n                state <= S0;\n            end\n        endcase\n    end\nend\n\nalways @* begin\n    case (state)\n        S0: z <= x;\n        S1: z <= ~x;\n        S2: z <= ~x;\n    endcase\nend\n\nreg [1:0] state;\nparameter S0 = 2'b00;\nparameter S1 = 2'b01;\nparameter S2 = 2'b10;"}
{"task_id": "ece241_2014_q5a", "completion": "reg [1:0] state, next_state;\nreg z, next_z;\n\nalways @(posedge clk or posedge reset)\n    if (reset)\n        state <= 2'b00;\n    else\n        state <= next_state;\n\nalways @*\n    case (state)\n        2'b00: if (~x) next_state = 2'b00; else next_state = 2'b01;\n        2'b01: if (~x) next_state = 2'b11; else next_state = 2'b00;\n        2'b10: if (~x) next_state = 2'b10; else next_state = 2'b11;\n        2'b11: if (~x) next_state = 2>b01; else next_state = 2>b10;\n    endcase\n\nalways @*\n    case (state)\n        2'b00: next_z = ~x;\n        2'b01: next_z = x;\n        2'b10: next_z = ~x;\n        2'b11: next_z = x;\n    endcase\n\nalways @(posedge clk)\n    z <= next_z;\n\nassign Z = z;\nendmodule"}
{"task_id": "ece241_2014_q5a", "completion": "```\nverilog\nreg [1:0] state, next_state;\nreg Z;\nreg x_reg;\n\nalways @(posedge clk or posedge reset)\n    if (reset)\n        state <= 2'b00;\n    else\n        state <= next_state;\n\nalways @*\n    case (state)\n        2'b00: begin\n            if (~x_reg)\n                next_state = 2'b01;\n            else\n                next_state = 2'b00;\n        end\n        2'b01: begin\n            if (~x_reg)\n                next_state = 2'b10;\n            else\n                next_state = 2'b11;\n        end\n        2'b10: begin\n            if (~x_reg)\n                next_state = 2'b01;\n            else\n                next_state = 2'b10;\n        end\n        2'b11: begin\n            if (~x_reg)\n                next_state = 2'b10;\n            else\n                next_state = 2'b11;\n        end\n    endcase\n\nalways @(posedge clk)\n    x_reg <= x;\n\nalways @*\n    case (state)\n        2'b00: Z = x_reg;\n        2'b01: Z = ~x_reg;\n        2'b10: Z = x_reg;\n        2'b11: Z = ~x_reg;\n    endcase\n\nendmodule\n```"}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk or negedge reset)\nbegin\n    if (~reset)\n        state <= A;\n    else\n        state <= next_state;\nend\n\nalways @*\ncase (state)\n    A: next_state = in ? B : A;\n    B: next_state = in ? B : C;\n    C: next_state = in ? D : A;\n    D: next_state = in ? B : C;\nendcase\n\nassign output = (state == D);\n\nendmodule"}
{"task_id": "fsm3", "completion": "reg [1:0] current_state, next_state;\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk or posedge reset)\n    if (reset)\n        current_state <= A;\n    else\n        current_state <= next_state;\n\nalways @(*)\n    case (current_state)\n    A: \n        next_state = in ? B : A;\n        output <= 1'b0;\n    B: \n        next_state = in ? B : C;\n        output <= 1'b0;\n    C: \n        next_state = in ? D : A;\n        output <= 1'b0;\n    D: \n        next_state = in ? B : C;\n        output <= 1'b1;\n    default:\n        next_state = A;\n        output <= 1'b0;\n    endcase\n\nendmodule"}
{"task_id": "fsm3", "completion": "reg [1:0] current_state, next_state;\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk or negedge reset)\nif (!reset) \n    current_state <= A;\nelse \n    current_state <= next_state;\n\nalways @(*)\ncase (current_state)\n    A: if (in) next_state = B; else next_state = A;\n    B: if (in) next_state = B; else next_state = C;\n    C: if (in) next_state = D; else next_state = A;\n    D: if (in) next_state = B; else next_state = C;\nendcase\n\nassign output = (current_state == D);\n\nendmodule"}
{"task_id": "fsm3", "completion": "reg [1:0] current_state, next_state;\n\nalways @(posedge clk or posedge reset) \n    if (reset) \n        current_state <= 2'b00;\n    else \n        current_state <= next_state;\n\nalways @(*) \n    case (current_state)\n        2'b00: next_state = in ? 2'b01 : 2'b00;\n        2'b01: next_state = in ? 2'b01 : 2'b10;\n        2'b10: next_state = in ? 2'b11 : 2'b00;\n        2'b11: next_state = in ? 2'b10 : 2'b01;\n    endcase\n\nassign output = (current_state == 2'b11);\n\nendmodule"}
{"task_id": "fsm3", "completion": "reg [1:0] current_state, next_state;\n\nalways @(posedge clk, negedge reset)\n    if (~reset)\n        current_state <= 2'b00;\n    else\n        current_state <= next_state;\n\nalways @*\n    case (current_state)\n        2'b00: \n            begin\n                case (in)\n                    1'b0: next_state = 2'b00;\n                    1'b1: next_state = 2'b01;\n                endcase\n                out = 1'b0;\n            end\n        2'b01: \n            begin\n                case (in)\n                    1'b0: next_state = 2'b10;\n                    1'b1: next_state = 2'b01;\n                endcase\n                out = 1'b0;\n            end\n        2'b10: \n            begin\n                case (in)\n                    1'b0: next_state = 2'b00;\n                    1'b1: next_state = 2'b11;\n                endcase\n                out = 1'b0;\n            end\n        2'b11: \n            begin\n                case (in)\n                    1'b0: next_state = 2'b10;\n                    1'b1: next_state = 2'b01;\n                endcase\n                out = 1'b1;\n            end\n    endcase\nendmodule"}
{"task_id": "vector2", "completion": "reg [31:0] reversed_data;\nalways @(posedge clk) begin\n    reversed_data[7:0] <= data[31:24];\n    reversed_data[15:8] <= data[23:16];\n    reversed_data[23:16] <= data[15:8];\n    reversed_data[31:24] <= data[7:0];\nend\nassign out_data = reversed_data;\nendmodule"}
{"task_id": "vector2", "completion": "reg [7:0] reversed_bytes [3:0];\nalways @(posedge clk) begin\n    reversed_bytes[0] <= input[7:0];\n    reversed_bytes[1] <= input[15:8];\n    reversed_bytes[2] <= input[23:16];\n    reversed_bytes[3] <= input[31:24];\n    output <= {reversed_bytes[3], reversed_bytes[2], reversed_bytes[1], reversed_bytes[0]};\nend\nendmodule"}
{"task_id": "vector2", "completion": "```\nverilog\nalways @(posedge clk) begin\n    o[7:0] <= i[24:31];\n    o[15:8] <= i[16:23];\n    o[23:16] <= i[8:15];\n    o[31:24] <= i[0:7];\nend\nendmodule\n```"}
{"task_id": "vector2", "completion": "wire [7:0] byte0, byte1, byte2, byte3;\nwire [31:0] data_in;\nwire [31:0] data_out;\n\nassign byte0 = data_in[7:0];\nassign byte1 = data_in[15:8];\nassign byte2 = data_in[23:16];\nassign byte3 = data_in[31:24];\n\nassign data_out = {byte3, byte2, byte1, byte0};\n\nendmodule"}
{"task_id": "vector2", "completion": "reg [7:0] reverse_byte;\nalways @(posedge clk) begin\n    reverse_byte[7:0] <= input[31:24];\n    reverse_byte[15:8] <= input[23:16];\n    reverse_byte[23:16] <= input[15:8];\n    reverse_byte[31:24] <= input[7:0];\n    output <= reverse_byte;\nend\nendmodule"}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk or posedge reset)\nif (reset)\n    q <= 0;\nelse\n    q <= d;"}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset) \n        q <= 1'b0;\n    else \n        q <= d;\nend"}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset) begin\n        q <= 1'b0;\n    end else begin\n        q <= d;\n    end\nend\nassign q_out = q;\n\nwire q;\nreg q;"}
{"task_id": "m2014_q4c", "completion": "always @(posedge clk or posedge reset)\n    if (reset) \n        q <= 1'b0;\n    else \n        q <= d;"}
{"task_id": "m2014_q4c", "completion": "reg Q;\nalways @(posedge clk or posedge reset)\nbegin\n    if (reset) Q <= 1'b0;\n    else Q <= D;\nend\nassign Q_out = Q;\nendmodule"}
{"task_id": "m2014_q6b", "completion": "always @(posedge clk)\n    case (y[3:2])\n        2'b00: Y2 <= ~in;\n        2'b01: Y2 <= in;\n        2'b10: Y2 <= 1'b0;\n        2'b11: Y2 <= 1'b0;\n    endcase\nendmodule"}
{"task_id": "m2014_q6b", "completion": "always @(posedge clk) begin\n  case ({y[3:2], in})\n    4'b0000: Y2 <= 1'b0;\n    4'b0001: Y2 <= 1'b1;\n    4'b0010: Y2 <= 1'b0;\n    4'b0011: Y2 <= 1'b0;\n    4'b0100: Y2 <= 1'b0;\n    4'b0101: Y2 <= 1'b0;\n    4'b0110: Y2 <= 1'b0;\n    4'b0111: Y2 <= 1'b1;\n    4'b1000: Y2 <= 1'b1;\n    4'b1001: Y2 <= 1'b0;\n    4'b1010: Y2 <= 1'b1;\n    4'b1011: Y2 <= 1'b0;\n    default: Y2 <= 1'bx;\n  endcase\nend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "always @ (posedge clk) begin\n    casez (y)\n        3'b000: Y2 <= in;\n        3'b001: Y2 <= in;\n        3'b010: Y2 <= in;\n        3'b011: Y2 <= ~in;\n        3'b100: Y2 <= in;\n        3'b101: Y2 <= ~in;\n    endcase\nend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "casez(y)\n\n4'b0000: Y2 = (x) ? 3'b001 : 3'b000;\n4'b0001: Y2 = (x) ? 3'b011 : 3'b001;\n4'b0010: Y2 = (x) ? 3'b100 : 3'b010;\n4'b0011: Y2 = (x) ? 3'b001 : 3'b011;\n4'b0100: Y2 = (x) ? 3'b101 : 3'b100;\n4'b0101: Y2 = (x) ? 3'b011 : 3'b101;\n4'b0110: Y2 = (x) ? 3'b110 : 3'b110;\n4'b0111: Y2 = (x) ? 3'b001 : 3'b111;\n4'b1000: Y2 = (x) ? 3'b110 : 3'b100;\n4'b1001: Y2 = (x) ? 3'b011 : 3'b101;\n4'b1010: Y2 = (x) ? 3'b010 : 3'b010;\n4'b1011: Y2 = (x) ? 3'b011 : 3'b010;\n4'b1100: Y2 = (x) ? 3'b110 : 3'b110;\n4'b1101: Y2 = (x) ? 3'b011 : 3'b110;\n4'b1110: Y2 = (x) ? 3'b001 : 3'b010;\n4'b1111: Y2 = (x) ? 3'b011 : 3'b011;\n\nendcase\n\nendmodule"}
{"task_id": "m2014_q6b", "completion": "casez({Y1,X})\n  4'b0000:  Y2=1'b0;\n  4'b0100:  Y2=1'b1;\n  4'b0001:  Y2=1'b0;\n  4'b0101:  Y2=1'b1;\n  4'b0011:  Y2=1'b0;\n  4'b0111:  Y2=1'b1;\n  4'b1010:  Y2=1'b1;\n  4'b1011:  Y2=1'b1;\n  4'b0010:  Y2=1'b1;\n  4'b0110:  Y2=1'b1;\n  4'b1000:  Y2=1'b1;\n  4'b1100:  Y2=1'b1;\n  4'b1001:  Y2=1'b1;\n  4'b1101:  Y2=1'b1;\n  default:  Y2=1'bx;\nendcase\nendmodule"}
{"task_id": "m2014_q6b", "completion": "reg [2:0] next;\n\nalways @(posedge clk)\nbegin\n    case (Y1, Y2, in)\n        3'b000: next = 3'b001;\n        3'b001: next = in ? 3'b000 : 3'b001;\n        3'b010: next = in ? 3'b011 : 3'b010;\n        3'b011: next = in ? 3'b000 : 3'b100;\n        3'b100: next = in ? 3'b101 : 3'b100;\n        3'b101: next = in ? 3'b010 : 3'b100;\n        3'b110: next = in ? 3'b111 : 3'b110;\n        3'b111: next = in ? 3'b000 : 3'b100;\n    endcase\n    Y2 <= next[2];\nend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "always @ (posedge clk)\nbegin\n  case (y[3:1])\n    3'b000 : y[2] <= y[3] & x;\n    3'b001 : y[2] <= y[3] || x;\n    3'b010 : y[2] <= y[3];\n    3'b011 : y[2] <= x;\n  endcase\nend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "reg Y2;\nalways @(posedge clk)\nbegin\n    case(y[3:1])\n        3'b000: Y2 <= x;\n        3'b001: Y2 <= x;\n        3'b010: Y2 <= x;\n        3'b011: Y2 <= ~x;\n        3'b100: Y2 <= ~x;\n        3'b101: Y2 <= ~x;\n    endcase\nend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "always @(posedge clk) begin\n    case(y[3:1])\n        3'b000: begin\n            case(x)\n                1'b0: y[2] <= 1'b1;\n                1'b1: y[2] <= 1'b0;\n            endcase\n        end\n        3'b001: begin\n            case(x)\n                1'b0: y[2] <= 1'b1;\n                1'b1: y[2] <= 1'b1;\n            endcase\n        end\n        3'b010: begin\n            case(x)\n                1'b0: y[2] <= 1'b0;\n                1'b1: y[2] <= 1'b1;\n            endcase\n        end\n        3'b011: begin\n            case(x)\n                1'b0: y[2] <= 1'b1;\n                1'b1: y[2] <= 1'b0;\n            endcase\n        end\n        3'b100: begin\n            case(x)\n                1'b0: y[2] <= 1'b1;\n                1'b1: y[2] <= 1'b1;\n            endcase\n        end\n        3'b101: begin\n            case(x)\n                1'b0: y[2] <= 1'b0;\n                1'b1: y[2] <= 1'b1;\n            endcase\n        end\n        3'b110: begin\n            case(x)\n                1'b0: y[2] <= 1'b0;\n                1'b1: y[2] <= 1'b1;\n            endcase\n        end\n        3'b111: begin\n            case(x)\n                1'b0: y[2] <= 1'b0;\n                1'b1: y[2] <= 1'b0;\n            endcase\n        end\n        default: y[2] <= 1'bx;\n    endcase\nend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "always @(posedge clk)\nbegin\n  case (y[3:1])\n    3'b000:\n      case (x)\n        0: y[2] <= 1'b0;\n        1: y[2] <= 1'b0;\n      endcase\n    3'b001:\n      case (x)\n        0: y[2] <= 1'b0;\n        1: y[2] <= 1'b1;\n      endcase\n    3'b010:\n      case (x)\n        0: y[2] <= 1'b0;\n        1: y[2] <= 1'b1;\n      endcase\n    3'b011:\n      case (x)\n        0: y[2] <= 1'b0;\n        1: y[2] <= 1'b0;\n      endcase\n    3'b100:\n      case (x)\n        0: y[2] <= 1'b0;\n        1: y[2] <= 1'b1;\n      endcase\n    3'b101:\n      case (x)\n        0: y[2] <= 1'b1;\n        1: y[2] <= 1'b0;\n      endcase\n    default:\n      y[2] <= 1'bx;\n  endcase\nend\nendmodule"}
